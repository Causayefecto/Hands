<!DOCTYPE html>
<!-- saved from url=(0032)https://mediapipe.dev/demo/hands -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <link rel="icon" href="https://mediapipe.dev/demo/favicon.ico">
  <link rel="stylesheet" type="text/css" href="./hands_files/control_utils.css" crossorigin="anonymous">
  <link rel="stylesheet" type="text/css" href="./hands_files/demo.css" crossorigin="anonymous">
  <script type="text/javascript" async="" src="./hands_files/analytics.js.descarga"></script><script src="./hands_files/camera_utils.js.descarga" crossorigin="anonymous"></script>
  <script src="./hands_files/control_utils.js.descarga" crossorigin="anonymous"></script>
  <script src="./hands_files/drawing_utils.js.descarga" crossorigin="anonymous"></script>
  <script src="./hands_files/hands.js.descarga" crossorigin="anonymous"></script>
</head>

<body class="loaded">
  <div class="container">
    <video class="input_video selfie"></video>
    <canvas class="output_canvas" width="1280px" height="720px"></canvas>
    <div class="loading" style="display: none;">
      <div class="spinner"></div>
      <div class="message">
        Loading
      </div>
    </div>
    <a class="abs logo" href="http://www.mediapipe.dev/" target="_blank">
      <div style="display: flex;align-items: center;bottom: 0;right: 10px;">
        <img class="logo" src="./hands_files/logo_white.png" alt="" style="
          height: 50px;">
        <span class="title">MediaPipe</span>
      </div>
    </a>
    <div class="shoutout">
      <div>
        <a href="https://code.mediapipe.dev/codepen/hands">
          Click here to edit in CodePen
        </a>
      </div>
      <div>
        <a href="https://solutions.mediapipe.dev/hands">
          Click here for more info
        </a>
      </div>
    </div>
  </div>
  <div class="control-panel">
  <div class="control-panel"><div class="control-panel-entry control-panel-text">MediaPipe Hands</div><div class="control-panel-entry control-panel-fps"><canvas width="100" height="100"></canvas><div class="fps-text">17 fps</div><div class="fps-30">30</div><div class="fps-60">60</div></div><div class="control-panel-entry control-panel-toggle yes"><span class="label">Selfie Mode</span><span class="value">Yes</span></div><div class="control-panel-entry control-panel-slider"><span class="label">Max Number of Hands</span><span class="callout">2</span><input class="value" type="range" min="1" max="4" step="1"></div><div class="control-panel-entry control-panel-slider"><span class="label">Min Detection Confidence</span><span class="callout">0.5</span><input class="value" type="range" min="0" max="1" step="0.01"></div><div class="control-panel-entry control-panel-slider"><span class="label">Min Tracking Confidence</span><span class="callout">0.5</span><input class="value" type="range" min="0" max="1" step="0.01"></div></div></div>



<script type="module">

// Our input frames will come from here.
const videoElement =
    document.getElementsByClassName('input_video')[0];
const canvasElement =
    document.getElementsByClassName('output_canvas')[0];
const controlsElement =
    document.getElementsByClassName('control-panel')[0];
const canvasCtx = canvasElement.getContext('2d');

// We'll add this to our control panel later, but we'll save it here so we can
// call tick() each time the graph runs.
const fpsControl = new FPS();

// Optimization: Turn off animated spinner after its hiding animation is done.
const spinner = document.querySelector('.loading');
spinner.ontransitionend = () => {
  spinner.style.display = 'none';
};

function onResults(results) {
  // Hide the spinner.
  document.body.classList.add('loaded');

  // Update the frame rate.
  fpsControl.tick();

  // Draw the overlays.
  canvasCtx.save();
  canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);
  canvasCtx.drawImage(
      results.image, 0, 0, canvasElement.width, canvasElement.height);
  if (results.multiHandLandmarks && results.multiHandedness) {
    for (let index = 0; index < results.multiHandLandmarks.length; index++) {
      const classification = results.multiHandedness[index];
      const isRightHand = classification.label === 'Right';
      const landmarks = results.multiHandLandmarks[index];
      drawConnectors(
          canvasCtx, landmarks, HAND_CONNECTIONS,
          {color: isRightHand ? '#00FF00' : '#FF0000'});
      drawLandmarks(canvasCtx, landmarks, {
        color: isRightHand ? '#00FF00' : '#FF0000',
        fillColor: isRightHand ? '#FF0000' : '#00FF00'
      });
    }
  }
  canvasCtx.restore();
}

const hands = new Hands({locateFile: (file) => {
  return `https://cdn.jsdelivr.net/npm/@mediapipe/hands@0.1/${file}`;
}});
hands.onResults(onResults);

/**
 * Instantiate a camera. We'll feed each frame we receive into the solution.
 */
const camera = new Camera(videoElement, {
  onFrame: async () => {
    await hands.send({image: videoElement});
  },
  width: 1280,
  height: 720
});
camera.start();

// Present a control panel through which the user can manipulate the solution
// options.
new ControlPanel(controlsElement, {
      selfieMode: true,
      maxNumHands: 2,
      minDetectionConfidence: 0.5,
      minTrackingConfidence: 0.5
    })
    .add([
      new StaticText({title: 'MediaPipe Hands'}),
      fpsControl,
      new Toggle({title: 'Selfie Mode', field: 'selfieMode'}),
      new Slider(
          {title: 'Max Number of Hands', field: 'maxNumHands', range: [1, 4], step: 1}),
      new Slider({
        title: 'Min Detection Confidence',
        field: 'minDetectionConfidence',
        range: [0, 1],
        step: 0.01
      }),
      new Slider({
        title: 'Min Tracking Confidence',
        field: 'minTrackingConfidence',
        range: [0, 1],
        step: 0.01
      }),
    ])
    .on(options => {
      videoElement.classList.toggle('selfie', options.selfieMode);
      hands.setOptions(options);
    });

</script>

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async="" src="./hands_files/js"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-140696581-1');
</script>
<script src="./hands_files/hands_solution_packed_assets_loader.js.descarga" crossorigin="anonymous"></script><script src="./hands_files/hands_solution_wasm_bin.js.descarga" crossorigin="anonymous"></script></body></html>